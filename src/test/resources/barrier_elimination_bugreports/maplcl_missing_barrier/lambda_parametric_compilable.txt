val id = UserFun("id", Array("x"), """|{ return x; }""".stripMargin, Seq(Float), Float)
val add = UserFun("add", Array("x", "y"), """|{ return x+y; }""".stripMargin, Seq(Float, Float), Float)
val mult = UserFun("mult", Array("l", "r"), """|{ return l * r; }""".stripMargin, Seq(Float, Float), Float)
fun(ArrayType(ArrayType(ArrayType(Float, SimplifySum(List(Var("inputWidth", RangeUnknown, Some(1)), SimplifyProd(List(Cst(2), Var("padFuncX", RangeUnknown, Some(3))))))), SimplifySum(List(Var("inputHeight", RangeUnknown, Some(2)), SimplifyProd(List(Cst(2), Var("padFuncY", RangeUnknown, Some(4))))))), Var("inputChannels", RangeUnknown, Some(0))), ArrayType(ArrayType(ArrayType(ArrayType(Float, Var("kernelWidth", RangeUnknown, Some(5))), Var("kernelHeight", RangeUnknown, Some(6))), Var("inputChannels", RangeUnknown, Some(0))), Var("numKernels", RangeUnknown, Some(9))),(p_0, p_1) => FunCall(Map(fun((p_2) => FunCall(Map(fun((p_3) => FunCall(Join(), p_3))), p_2))), FunCall(Join(), FunCall(Map(fun((p_4) => FunCall(Map(fun((p_5) => FunCall(Map(fun((p_6) => FunCall(Join(), p_6))), FunCall(Join(), FunCall(Map(fun((p_7) => FunCall(TransposeW(), p_7))), p_5))))), p_4))), FunCall(Map(fun((p_8) => FunCall(TransposeW(), FunCall(Map(fun((p_9) => FunCall(TransposeW(), p_9))), p_8)))), FunCall(MapWrg(0)(fun((p_10) => FunCall(MapSeq(fun((p_11) => FunCall(MapSeq(fun((p_12) => FunCall(fun((p_13) => FunCall(fun((p_14) => FunCall(Join(), FunCall(Split(Var("kernelGroupSize", RangeAdd(Cst(1), SimplifySum(List(Cst(1), Var("numKernels", RangeUnknown, Some(9)))), Cst(1)), Some(15))), FunCall(MapSeq(fun((p_15) => FunCall(MapLcl(0)(fun((p_16) => FunCall(MapSeq(fun((p_17) => FunCall(MapSeq(fun((p_18) => FunCall(toGlobal(fun((p_19) => FunCall(id, p_19))), p_18))), FunCall(ReduceSeq(fun((p_20, p_21) => FunCall(add, p_20, p_21))), FunCall(toPrivate(fun((p_22) => FunCall(id, p_22))), Value("0.0f", Float)), p_17)))), p_16))), p_15))), FunCall(Join(), FunCall(Map(fun((p_23) => FunCall(Map(fun((p_24) => FunCall(Map(fun((p_25) => FunCall(Transpose(), p_25))), p_24))), p_23))), FunCall(Map(fun((p_26) => FunCall(Map(fun((p_27) => FunCall(Transpose(), p_27))), p_26))), FunCall(Map(fun((p_28) => FunCall(Transpose(), p_28))), FunCall(Transpose(), FunCall(Map(fun((p_29) => FunCall(Transpose(), p_29))), FunCall(Map(fun((p_30) => FunCall(Map(fun((p_31) => FunCall(Transpose(), p_31))), p_30))), FunCall(Map(fun((p_32) => FunCall(Map(fun((p_33) => FunCall(Map(fun((p_34) => FunCall(Transpose(), p_34))), p_33))), p_32))), FunCall(MapSeq(fun((p_35) => FunCall(Join(), FunCall(Map(fun((p_36) => FunCall(Map(fun((p_37) => FunCall(Map(fun((p_38) => FunCall(Join(), p_38))), FunCall(Join(), FunCall(Map(fun((p_39) => FunCall(TransposeW(), p_39))), p_37))))), p_36))), FunCall(Map(fun((p_40) => FunCall(TransposeW(), FunCall(Map(fun((p_41) => FunCall(TransposeW(), p_41))), p_40)))), FunCall(MapLcl(0)(fun((p_42) => FunCall(Split(SimplifyProd(List(Var("tileWidth", RangeAdd(Cst(1), SimplifySum(List(Cst(2), (SimplifySum(List(Var("inputWidth", RangeUnknown, Some(1)), SimplifyProd(List(Cst(2), Var("padFuncX", RangeUnknown, Some(3)))), SimplifyProd(List(Cst(-1), Var("kernelWidth", RangeUnknown, Some(5))))))) / (Var("kernelStrideX", RangeUnknown, Some(7))))), Cst(1)), Some(12)), Cst(1)/^(Var("inputCacheSizeX", RangeAdd(Cst(1), SimplifySum(List(Cst(1), Var("tileWidth", RangeAdd(Cst(1), SimplifySum(List(Cst(2), (SimplifySum(List(Var("inputWidth", RangeUnknown, Some(1)), SimplifyProd(List(Cst(2), Var("padFuncX", RangeUnknown, Some(3)))), SimplifyProd(List(Cst(-1), Var("kernelWidth", RangeUnknown, Some(5))))))) / (Var("kernelStrideX", RangeUnknown, Some(7))))), Cst(1)), Some(12)))), Cst(1)), Some(16)))))), FunCall(MapSeq(fun((p_43) => FunCall(fun((p_44) => FunCall(fun((p_45) => FunCall(MapSeq(fun((p_46) => FunCall(MapSeq(fun((p_47) => FunCall(MapSeq(fun((p_48) => FunCall(MapSeq(fun((p_49) => FunCall(toGlobal(fun((p_50) => FunCall(id, p_50))), p_49))), FunCall(ReduceSeq(fun((p_51, p_52) => FunCall(add, p_51, FunCall(mult, FunCall(Get(0), p_52), FunCall(Get(1), p_52))))), FunCall(toPrivate(fun((p_53) => FunCall(id, p_53))), Value("0.0f", Float)), FunCall(Zip(), FunCall(Join(), FunCall(Join(), p_48)), FunCall(Join(), FunCall(Join(), p_46))))))), p_47))), p_45))), p_44)), FunCall(MapSeq(fun((p_54) => FunCall(MapSeq(fun((p_55) => FunCall(Split(Var("kernelHeight", RangeUnknown, Some(6))), FunCall(MapSeq(fun((p_56) => FunCall(MapSeq(fun((p_57) => FunCall(toGlobal(fun((p_58) => FunCall(id, p_58))), p_57))), p_56))), FunCall(Join(), p_55))))), p_54))), p_43))), p_42))), FunCall(Join(), FunCall(Map(fun((p_59) => FunCall(Transpose(), p_59))), FunCall(Split(Var("inputCacheSizeY", RangeAdd(Cst(1), SimplifySum(List(Cst(1), Var("tileHeight", RangeAdd(Cst(1), SimplifySum(List(Cst(2), (SimplifySum(List(Var("inputHeight", RangeUnknown, Some(2)), SimplifyProd(List(Cst(2), Var("padFuncY", RangeUnknown, Some(4)))), SimplifyProd(List(Cst(-1), Var("kernelHeight", RangeUnknown, Some(6))))))) / (Var("kernelStrideY", RangeUnknown, Some(8))))), Cst(1)), Some(13)))), Cst(1)), Some(17))), FunCall(Map(fun((p_60) => FunCall(Split(Var("inputCacheSizeX", RangeAdd(Cst(1), SimplifySum(List(Cst(1), Var("tileWidth", RangeAdd(Cst(1), SimplifySum(List(Cst(2), (SimplifySum(List(Var("inputWidth", RangeUnknown, Some(1)), SimplifyProd(List(Cst(2), Var("padFuncX", RangeUnknown, Some(3)))), SimplifyProd(List(Cst(-1), Var("kernelWidth", RangeUnknown, Some(5))))))) / (Var("kernelStrideX", RangeUnknown, Some(7))))), Cst(1)), Some(12)))), Cst(1)), Some(16))), p_60))), FunCall(Get(0), p_35))))))))), FunCall(Split(Var("kernelCacheSize", RangeAdd(Cst(1), SimplifySum(List(Cst(1), Var("kernelGroupSize", RangeAdd(Cst(1), SimplifySum(List(Cst(1), Var("numKernels", RangeUnknown, Some(9)))), Cst(1)), Some(15)))), Cst(1)), Some(18))), FunCall(Get(1), p_35)))))))), FunCall(fun((p_61) => FunCall(fun((p_62) => FunCall(Zip(), FunCall(Map(fun((p_63) => FunCall(Map(fun((p_64) => FunCall(Transpose(), p_64))), p_63))), FunCall(Map(fun((p_65) => FunCall(Transpose(), p_65))), FunCall(Map(fun((p_66) => FunCall(Map(fun((p_67) => FunCall(Get(0), p_67))), p_66))), p_62))), FunCall(Map(fun((p_68) => FunCall(Transpose(), p_68))), FunCall(Map(fun((p_69) => FunCall(Map(fun((p_70) => FunCall(Get(1), p_70))), p_69))), p_62)))), FunCall(Split(Var("tileDepth", RangeAdd(Cst(1), SimplifySum(List(Cst(1), Var("inputChannels", RangeUnknown, Some(0)))), Cst(1)), Some(14))), FunCall(Zip(), FunCall(Transpose(), FunCall(Map(fun((p_71) => FunCall(Transpose(), p_71))), FunCall(Get(0), p_61))), FunCall(Transpose(), FunCall(Get(1), p_61)))))), FunCall(Tuple(2), p_14, p_13))))))))))))))), FunCall(MapSeq(fun((p_72) => FunCall(MapLcl(0)(fun((p_73) => FunCall(MapSeq(fun((p_74) => FunCall(Split(Var("kernelWidth", RangeUnknown, Some(5))), FunCall(MapSeq(fun((p_75) => FunCall(toGlobal(fun((p_76) => FunCall(id, p_76))), p_75))), FunCall(Join(), p_74))))), p_73))), p_72))), p_12))), FunCall(MapLcl(0)(fun((p_77) => FunCall(MapSeq(fun((p_78) => FunCall(Split(Var("kernelWidth", RangeUnknown, Some(5))), FunCall(MapSeq(fun((p_79) => FunCall(toGlobal(fun((p_80) => FunCall(id, p_80))), p_79))), FunCall(Join(), p_78))))), p_77))), p_10)))), p_11))), FunCall(Map(fun((p_81) => FunCall(Transpose(), p_81))), FunCall(Split(Var("tileHeight", RangeAdd(Cst(1), SimplifySum(List(Cst(2), (SimplifySum(List(Var("inputHeight", RangeUnknown, Some(2)), SimplifyProd(List(Cst(2), Var("padFuncY", RangeUnknown, Some(4)))), SimplifyProd(List(Cst(-1), Var("kernelHeight", RangeUnknown, Some(6))))))) / (Var("kernelStrideY", RangeUnknown, Some(8))))), Cst(1)), Some(13))), FunCall(Map(fun((p_82) => FunCall(Split(Var("tileWidth", RangeAdd(Cst(1), SimplifySum(List(Cst(2), (SimplifySum(List(Var("inputWidth", RangeUnknown, Some(1)), SimplifyProd(List(Cst(2), Var("padFuncX", RangeUnknown, Some(3)))), SimplifyProd(List(Cst(-1), Var("kernelWidth", RangeUnknown, Some(5))))))) / (Var("kernelStrideX", RangeUnknown, Some(7))))), Cst(1)), Some(12))), p_82))), FunCall(Map(fun((p_83) => FunCall(Transpose(), p_83))), FunCall(Transpose(), FunCall(Map(fun((p_84) => FunCall(Map(fun((p_85) => FunCall(Transpose(), p_85))), FunCall(Slide(Var("kernelHeight", RangeUnknown, Some(6)), Var("kernelStrideY", RangeUnknown, Some(8))), FunCall(Map(fun((p_86) => FunCall(Slide(Var("kernelWidth", RangeUnknown, Some(5)), Var("kernelStrideX", RangeUnknown, Some(7))), p_86))), p_84))))), p_0))))))))), FunCall(Split(Var("kernelGroupSize", RangeAdd(Cst(1), SimplifySum(List(Cst(1), Var("numKernels", RangeUnknown, Some(9)))), Cst(1)), Some(15))), p_1)))))))